name: Construcción y despliegue de una aplicación ASP.NET MVC a Azure

env:
  AZURE_WEBAPP_NAME: upt-awa-349          # Nombre de la aplicación en Azure
  AZURE_WEBAPP_PACKAGE_PATH: '.'          # Ruta de destino del paquete
  DOTNET_VERSION: '8'                     # Versión de .NET

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Clonar el repositorio
      - uses: actions/checkout@v4

      # Configurar .NET
      - name: Configurando .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Configurar Java
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Restaurar los paquetes
      - name: Restaurar paquetes
        run: cd src && dotnet restore

      # Crear la carpeta TestResults si no existe
      - name: Crear carpeta TestResults si no existe
        run: mkdir -p TestResults

      # Copiar archivo coverage.cobertura.xml manualmente
      - name: Copiar archivo coverage.cobertura.xml
        run: |
          mkdir -p TestResults
          cp ./coverage.cobertura.xml ./TestResults/coverage.cobertura.xml

      # Verificar contenido de la carpeta TestResults
      - name: Verificar contenido de TestResults
        run: ls -R TestResults

      # Generar reporte de cobertura
      - name: Generar reporte de cobertura
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          reports: ./TestResults/coverage.cobertura.xml  # Ruta exacta
          targetdir: coveragereport
          reporttypes: MarkdownSummary;MarkdownAssembliesSummary;MarkdownSummaryGithub

      # Subir el reporte de cobertura como artefacto
      - name: Subir artefacto del reporte de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: coveragereport

      # Publicar el resumen de cobertura en el build
      - name: Publicar cobertura en el resumen de build
        run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        shell: bash

      # Instalar Scanner para análisis de código
      - name: Instalar SonarScanner
        run: dotnet tool install -g dotnet-sonarscanner

      # Ejecutar análisis de código con SonarQube
      - name: Ejecutar escaneo de Sonar
        run: |
          cd src
          dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Publicar la aplicación localmente
      - name: Publicar la aplicación localmente
        run: cd src && dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish

      # Subir el artefacto para el despliegue
      - name: Subir artefacto de la aplicación
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/publish

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Descargar artefacto generado por el build
      - name: Descargar artefacto de la aplicación
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      # Desplegar la aplicación a Azure Web App
      - name: Desplegar a Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          restart: true